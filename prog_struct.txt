/ - directory
% - subwork that has been completed
{} - future
% - reference/idea/thought
ref - reference from another library

/fsap (free structural analysis package)
    /utils
        unit_conversion.py
            %https://www.codeproject.com/Articles/23087/Measurement-Unit-Conversion-Library
            %https://social.msdn.microsoft.com/Forums/en-US/f45acc04-c5b9-4c04-af42-1657ea3f6105/need-help-with-unit-conversion-class?forum=csharpgeneral
        matrix_decomposition.py
            %i want to use numpy because it is really good stuff
            %i also want to write my own stuff because i want to learn and i
            want the code to be mine
            %is this ridiculous? absolutely?
            %i am torn between quickly standing something up that works and
            writing all the code to make it run
            %i think the latter appeals to me more but it will take much much
            longer
            %mine also might be slower because numpy uses C libraries
            %what do i run here; LU Decomposition, Cholesky, Frontal, one of each?
            %Frontal Solver Papers (for when I get around to it):
            %Irons, B. M., 1970. A frontal solution scheme for finite element analysis. Int. J. Numer. Methods Eng. 2, 5--32
            %Duff, I.S. , Erisman, A. M. , Reid, J.K. 1986. Direct methods for sparse matrices, Oxford University Press, Inc., New York, NY
            %Davis, T. (2006). Direct Methods for Sparse Linear Systems. Fundamentals of Algorithms. SIAM, Philadelphia.
            % The Multifrontal Method for Sparse Matrix Solution: Theory and Practice, Joseph W. H. Liu, SIAM Review, Vol. 34, No. 1 (Mar., 1992), pp. 82-109 
        stress_tensor.py
        strain_tensor.py
    /geometry
        point.py (2D and 3D)
            *documentation
            *unit testing
        line.py
        {plane.py}
        {volume.py}
    /input (parsing input)
        interperter based parsing
        user_input_verification
    /material
        matl_base class
            %really this is just a dictonary of points
            %function to interpolate
            %function to return key:value pairs
        matl_user_defined class
        matl_steel class
        matl_concrete class
        %would some kind of matrix be useable here
    /section_property
        sp_base class
            %the following properties require a more complex calculation
            %i do not know how to do it at this time
            %therefore they will be estimated for known shapes
            %otherwise the user will be required to provide them
                %correct shear area for general shape
                %correct torsional constant for general shape
            {plastic}
            {correct plastic section modulus for general shape}
            {seperate module for independent use}
        sp_rectangle class
        sp_circle class
        sp_i_shape class
        sp_angle class
        sp_channel class
        sp_round_tube class
        sp_rect_tube
        sp_user_defined class
    /stiffness
        /axial_stiffness
            axial_k_matrix class
            compression only
            tension only
        /2D_thin_beam
            axial_1Dbending_shear_k_matrix class
            %doesn't account for shear deformation
        /2D_thick_beam
            axial_1Dbending_shear_k_matrix class
            %accounts for shear deformation
        /3D_thin_beam
            axial_2Dbending_shear_torsion_k_matrix.py
            %doesn't account for shear deformation
        /3D_thick_beam
            axial_2Dbending_shear_torsion_k_matrix.py 
            %accounts for shear deformation
            %for shear deformation see Cook Book
        {/soil_spring}
        {/user_defined}
    /load
        force class 
        load_point class
        load_line class
        {load_area.py}
        {load_moving class}
            %multi-step static - think mlob - load on structure>solve structure
            %influence line/surface
            %LU decomposition -> iterate through RHS with a unit load in each DOF, will reduce computation time -> save shear, moment, and displacement results at all nodes for each unit load -> influence line
    /analysis
        element.py
            %class to organize element level properties
            %will hold geometry class instance, mat'l class instance, section prop class instance, section orientation, section offset, element stiffness matrix, discretization, geometric stiffness matrix(?), mass stiffness matrix(?), local to global transformation maxtrix
        model.py
            %assemble global stiffness matrix
            %run analysis
    /output


